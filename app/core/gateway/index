app/Core/Gateway/
├── Services/
│   ├── GatewayService.php
│   │   Amaç: API Gateway yönetimi
│   │   İçerik:
│   │   ```php
│   │   class GatewayService
│   │   {
│   │       // İstek yönlendirme
│   │       public function route(Request $request): Response
│   │       {
│   │           // Servis bulma
│   │           $service = $this->discoverService($request);
│   │           
│   │           // Rate limiting
│   │           $this->checkRateLimit($request);
│   │           
│   │           // İstek yönlendirme
│   │           return $this->forwardRequest($service, $request);
│   │       }
│   │
│   │       // Servis keşfi
│   │       protected function discoverService(Request $request): Service
│   │       {
│   │           // Service registry kontrolü
│   │           // Load balancing
│   │           // Health check
│   │       }
│   │   }
│   │   ```
│   │
│   └── RegistryService.php
│       Amaç: Servis kayıt yönetimi
│       Özellikler:
│       - Servis kaydı
│       - Health check
│       - Load balancing

├── Middleware/
│   ├── AuthenticationMiddleware.php
│   │   Amaç: Kimlik doğrulama
│   │   Özellikler:
│   │   - Token doğrulama
│   │   - API key kontrolü
│   │   - OAuth işlemleri
│   │
│   ├── RateLimitMiddleware.php
│   │   Amaç: İstek sınırlama
│   │   Özellikler:
│   │   - Kota yönetimi
│   │   - Limit kontrolü
│   │   - Throttling
│   │
│   └── CircuitBreakerMiddleware.php
│       Amaç: Devre kesici
│       Özellikler:
│       - Hata toleransı
│       - Fallback mekanizması
│       - Otomatik kurtarma

└── LoadBalancer/
    ├── LoadBalancerService.php
    │   Amaç: Yük dengeleme
    │   İçerik:
    │   ```php
    │   class LoadBalancerService
    │   {
    │       // Servis seçimi
    │       public function selectService(): Service
    │       {
    │           // Yük analizi
    │           // Health check
    │           // Optimal servis seçimi
│           }
│   
│           // Yük dağıtımı
│           public function distributeLoad(Request $request): Service
│           {
│               // Round robin
│               // Least connections
│               // Resource based
│           }
│       }
│       ```
│   │
    └── Strategies/
        ├── RoundRobin.php
        ├── LeastConnections.php
        └── ResourceBased.php

### Microservices/
```php
app/Core/Microservices/
├── Services/
│   ├── ServiceManager.php
│   │   Amaç: Mikroservis yönetimi
│   │   İçerik:
│   │   ```php
│   │   class ServiceManager
│   │   {
│   │       // Servis başlatma
│   │       public function startService(string $serviceName): void
│   │       {
│   │           // Servis konfigürasyonu
│   │           // Bağımlılık kontrolü
│   │           // Servis başlatma
│   │       }
│   │
│   │       // Servis iletişimi
│   │       public function communicate(string $service, Message $message): Response
│   │       {
│   │           // Message routing
│   │           // Request/response handling
│   │           // Error handling
│   │       }
│   │   }
│   │   ```
│   │
│   └── DiscoveryService.php
│       Amaç: Servis keşif sistemi
│       Özellikler:
│       - Servis kaydı
│       - Servis bulma
│       - Health check

├── Communication/
│   ├── MessageBroker.php
│   │   Amaç: Mesaj aracısı
│   │   Özellikler:
│   │   - Message queuing
│   │   - Pub/sub
│   │   - Event streaming
│   │
│   └── Protocols/
│       ├── HTTP.php
│       ├── gRPC.php
│       └── WebSocket.php

└── Containers/
    ├── ContainerManager.php
    │   Amaç: Container yönetimi
    │   Özellikler:
    │   - Container lifecycle
    │   - Resource management
    │   - Scaling
    │
    └── Orchestration/
        ├── KubernetesManager.php
        └── DockerManager.php
